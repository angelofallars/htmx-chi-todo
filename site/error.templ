package site

import (
	"net/http"
	"github.com/angelofallars/htmx-chi-todo/htmx"
)

// Render an error message to return to the user.
func RenderError(w http.ResponseWriter, code int, err error) {
	w.Header().Add(htmx.HeaderReswap, "beforeend")
	w.Header().Add(htmx.HeaderRetarget, "#errors")
	w.WriteHeader(code)
	errorMessage(err).Render(context.Background(), w)
}

templ errorMessage(err error) {
	<div
 		_="init wait 10s then
                add .err-fadeout then
                settle then
                remove me"
 		class={
			"w-72",
			"px-4", "py-4",
			"bg-red-200",
			"border-2",
			"border-red-700",
			"text-red-700",
			"rounded-xl",
			"flex",
			"justify-between",
			"err-fadein",
		}
	>
		<div>{ err.Error() }</div>
		<button
 			_="on click add .err-fadeout to the closest parent <div/> then
                        settle then
                        remove the closest parent <div/>"
 			class="font-bold"
		>
			X
		</button>
	</div>
}

templ errors() {
	<div id="errors" class="absolute bottom-4 right-4 flex flex-col-reverse gap-2"></div>
}

script scriptErrorInit() {
    htmx.on('htmx:beforeSwap', function(evt) {
        if (evt.detail.xhr.status >= 400){
            evt.detail.shouldSwap = true;
            evt.detail.isError = false;
        }        
    });
}
